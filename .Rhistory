filter(county_hesitancy, state == "New Mexico", week=="2021-08-02") %>%
select(name)
hesitancy_data1 <- hesitancy_data %>%
mutate(week = cut(time_value, "week")) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
# https://cmu-delphi.github.io/delphi-epidata/symptom-survey/
library(covidcast)
library(tidyverse)
library(openintro)
library(albersusa)
library(plotly)
hesitancy_data1 <- hesitancy_data %>%
mutate(week = cut(time_value, "week")) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
us_county <- counties_sf("laea")
us_states <- usa_sf("laea")
hesitancy_county <- filter(hesitancy_data1, is.na(fips_state))
hesitancy_megacounty <- filter(hesitancy_data1, !is.na(fips_state))
county_hesitancy <- inner_join(us_county, hesitancy_county, by=c("fips"="geo_value")) %>%
mutate(name = str_replace(name, '\361', 'n'))
filter(county_hesitancy, state == "New Mexico", week=="2021-08-02") %>%
select(name)
megacounty_hesitancy <- left_join(us_states, hesitancy_megacounty, by=c("fips_state"="fips_state"))
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
my_colors <- c("#313695", "#4575b4", "#74add1", "#abdae9", "#e0f3f8", "#ffffbf", "#fee190", "#fdaf61", "#f46c43", "#f46c43", "#d73027", "#a50027")
covidmap <- function(date_param) {
county_hesitancy_date <- filter(county_hesitancy, week == "2022-02-28") %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
megacounty_hesitancy_date <- filter(megacounty_hesitancy, week == "2022-02-28") %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
m <- ggplot() +
geom_sf(data=megacounty_hesitancy_date, aes(text=text, fill=hesitancy)) +
geom_sf(data=county_hesitancy_date, aes(text=text, fill=hesitancy),size=0.3, color="black") +
my_map_theme() +
scale_fill_gradient2("Percent\nHesitancy", labels=scales::percent, low="blue", mid="#ffffbf", high="red", limits=c(0, 0.35), midpoint=0.18) +
labs(title = paste("<b>COVID Vaccine Hesitancy by County</b><br><sup>Percentage of population who is unvaccinated, has no appointment to receive a vaccine,\n and would definitely or probably choose not to get vaccinated if a vaccine were offered.\nWeek of", date_param, "</sup>")) +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggplotly(m, tooltip = c("text")) %>%
style(hoveron = "fills")
}
covidmap("2022-02-28")
View(WHO_metadata)
View(WHOLifeExpectancy)
View(WHOLifeExpectancyTidy)
expectancy_2016 <- filter(WHOLifeExpectancyTidy, year == 2016);
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
library(tidyverse)
library(openintro)
library(rnaturalearth)
library(rnaturalearthdata)
library(plotly)
library(readxl)
expectancy_both_sexes_2016 <- WHOiso %>%
filter(sex == "Both sexes")
both_sexes_expectancy_2016 <- left_join(world, expectancy_both_sexes_2016, by="iso_a3")
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
ggplot(data = both_sexes_expectancy_2016) +
geom_sf(aes(fill = HALEbirth), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
my_map_theme() +
labs(title = "Healthy Life Expectancy at\nBirth in 2016")
expectancy_2016 <- filter(WHOLifeExpectancyTidy, year == 2016);
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
WHOiso <- left_join(expectancy_2016, WHO_metadata, by="country")
world_life_expectancy_2016 <- left_join(world, WHOiso, by="iso_a3")
View(world)
expectancy_2016 <- filter(WHOLifeExpectancyTidy, year == 2016 & sex == "Both sexes");
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
WHOiso <- left_join(expectancy_2016, WHO_metadata, by="country")
world_life_expectancy_2016 <- left_join(world, WHOiso, by="iso_a3")
library(tidyverse)
library(openintro)
library(rnaturalearth)
library(rnaturalearthdata)
library(plotly)
library(readxl)
WHOLifeExpectancy <- read_excel("WHOLifeExpectancy.xlsx", skip = 2)
yearlist <- c(2016, 2015, 2010, 2005, 2000)
names(WHOLifeExpectancy) <- c("country",
paste("HALEbirth", "Both sexes", yearlist, sep="_"),
paste("HALEbirth", "Male", yearlist, sep="_"),
paste("HALEbirth", "Female", yearlist, sep="_"),
paste("HALE60", "Both sexes", yearlist, sep="_"),
paste("HALE60", "Male", yearlist, sep="_"),
paste("HALE60", "Female", yearlist, sep="_"))
WHOLifeExpectancyTidy <- WHOLifeExpectancy %>%
pivot_longer("HALEbirth_Both sexes_2016":HALE60_Female_2000, names_to = "group") %>%
separate(col="group", into = c("type", "sex", "year"), sep="_") %>%
pivot_wider(names_from = type, values_from = value)%>%
mutate(HALE60 = as.numeric(HALE60), HALEbirth = as.numeric(HALEbirth), year=as.numeric(year)) %>%
arrange(desc(year))
head(WHOLifeExpectancyTidy, 10)
expectancy_2016 <- filter(WHOLifeExpectancyTidy, year == 2016 & sex == "Both sexes");
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
WHOiso <- left_join(expectancy_2016, WHO_metadata, by="country")
world_life_expectancy_2016_both <- left_join(world, WHOiso, by="iso_a3")
expectancy_both_2016 <- filter(WHOLifeExpectancyTidy, year == 2016 & sex == "Both sexes");
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
WHOiso <- left_join(expectancy_both_2016, WHO_metadata, by="country")
world_life_expectancy_2016_both <- left_join(world, WHOiso, by="iso_a3")
library(tidyverse)
library(openintro)
library(rnaturalearth)
library(rnaturalearthdata)
library(plotly)
library(readxl)
WHOLifeExpectancy <- read_excel("WHOLifeExpectancy.xlsx", skip = 2)
yearlist <- c(2016, 2015, 2010, 2005, 2000)
names(WHOLifeExpectancy) <- c("country",
paste("HALEbirth", "Both sexes", yearlist, sep="_"),
paste("HALEbirth", "Male", yearlist, sep="_"),
paste("HALEbirth", "Female", yearlist, sep="_"),
paste("HALE60", "Both sexes", yearlist, sep="_"),
paste("HALE60", "Male", yearlist, sep="_"),
paste("HALE60", "Female", yearlist, sep="_"))
WHOLifeExpectancyTidy <- WHOLifeExpectancy %>%
pivot_longer("HALEbirth_Both sexes_2016":HALE60_Female_2000, names_to = "group") %>%
separate(col="group", into = c("type", "sex", "year"), sep="_") %>%
pivot_wider(names_from = type, values_from = value)%>%
mutate(HALE60 = as.numeric(HALE60), HALEbirth = as.numeric(HALEbirth), year=as.numeric(year)) %>%
arrange(desc(year))
head(WHOLifeExpectancyTidy, 10)
expectancy_both_2016 <- filter(WHOLifeExpectancyTidy, year == 2016 & sex == "Both sexes");
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
WHOiso <- left_join(expectancy_both_2016, WHO_metadata, by="country")
world_life_expectancy_2016_both <- left_join(world, WHOiso, by="iso_a3")
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
ggplot(data = world_life_expectancy_2016_both) +
geom_sf(aes(fill = HALEbirth), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
my_map_theme() +
labs(title = "Healthy Life Expectancy at\nBirth in 2016")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth)) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(both_sexes_expectancy_2016), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth)) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(world_life_expectancy_2016_both), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth, "years")) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(world_life_expectancy_2016_both), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
WHOLifeExpectancyTidy$country[is.na(WHOLifeExpectancyTidy$HALEbirth)]
View(world_life_expectancy_2016_both)
WHOLifeExpectancyTidy <- WHOLifeExpectancy %>%
pivot_longer("HALEbirth_Both sexes_2016":HALE60_Female_2000, names_to = "group") %>%
separate(col="group", into = c("type", "sex", "year"), sep="_") %>%
pivot_wider(names_from = type, values_from = value)%>%
mutate(HALE60 = as.numeric(HALE60), HALEbirth = as.numeric(HALEbirth), year=as.numeric(year)) %>%
arrange(desc(year))
head(WHOLifeExpectancyTidy, 10)
View(expectancy_both_2016)
View(WHOiso)
hesitancy_data1 <- hesitancy_data %>%
mutate(week = cut(time_value, "week")) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
hesitancy_data1 <- hesitancy_data %>%
mutate(week = cut(time_value, "week")) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
hesitancy_data <- covidcast_signal("fb-survey", "smoothed_wcovid_vaccinated_appointment_or_accept", geo_type = "county")
hesitancy_data1 <- hesitancy_data %>%
mutate(week = cut(time_value, "week")) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
us_county <- counties_sf("laea")
us_states <- usa_sf("laea")
hesitancy_county <- filter(hesitancy_data1, is.na(fips_state))
hesitancy_megacounty <- filter(hesitancy_data1, !is.na(fips_state))
county_hesitancy <- inner_join(us_county, hesitancy_county, by=c("fips"="geo_value")) %>%
mutate(name = str_replace(name, '\361', 'n'))
megacounty_hesitancy <- left_join(us_states, hesitancy_megacounty, by=c("fips_state"="fips_state"))
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
covidmap <- function(date_param) {
county_hesitancy_date <- filter(county_hesitancy, week == date_param) %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
megacounty_hesitancy_date <- filter(megacounty_hesitancy, week == "2022-02-28") %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
m <- ggplot() +
geom_sf(data=megacounty_hesitancy_date, aes(text=text, fill=hesitancy)) +
geom_sf(data=county_hesitancy_date, aes(text=text, fill=hesitancy),size=0.3, color="black") +
my_map_theme() +
scale_fill_gradient2("Percent\nHesitancy", labels=scales::percent, low="blue", mid="#ffffbf", high="red", limits=c(0, 0.35), midpoint=0.18) +
labs(title = paste("<b>COVID Vaccine Hesitancy by County</b><br><sup>Percentage of population who is unvaccinated, has no appointment to receive a vaccine,\n and would definitely or probably choose not to get vaccinated if a vaccine were offered.\nWeek of", date_param, "</sup>")) +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggplotly(m, tooltip = c("text")) %>%
style(hoveron = "fills")
}
covidmap("2022-02-28")
county_hesitancy <- inner_join(us_county, hesitancy_county, by=c("fips"="geo_value")) %>%
mutate(name = str_replace(name, '\361', 'n'))
View(county_hesitancy)
max(county_hesitancy$week)
View(county_hesitancy)
hesitancy_data1 <- hesitancy_data %>%
mutate(week = as.Date(cut(time_value, "week"), '%Y-%m-%d')) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
View(hesitancy_county)
View(hesitancy_data)
View(hesitancy_data1)
hesitancy_data1 <- hesitancy_data %>%
mutate(week = as.Date(cut(time_value, "week"), '%Y-%m-%d')) %>%
group_by(geo_value, week) %>%
summarise(value = mean(value)) %>%
mutate(hesitancy = (100-value)/100, fips_state=ifelse(substr(geo_value, 3, 5) == "000", substr(geo_value,1,2), NA))
us_county <- counties_sf("laea")
us_states <- usa_sf("laea")
hesitancy_county <- filter(hesitancy_data1, is.na(fips_state))
hesitancy_megacounty <- filter(hesitancy_data1, !is.na(fips_state))
county_hesitancy <- inner_join(us_county, hesitancy_county, by=c("fips"="geo_value")) %>%
mutate(name = str_replace(name, '\361', 'n'))
megacounty_hesitancy <- left_join(us_states, hesitancy_megacounty, by=c("fips_state"="fips_state"))
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
covidmap <- function(date_param) {
county_hesitancy_date <- filter(county_hesitancy, week == date_param) %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
megacounty_hesitancy_date <- filter(megacounty_hesitancy, week == "2022-02-28") %>%
mutate(text = paste("<b>", name, "</b>\nHesitancy: ", signif(hesitancy,3) * 100, '%', sep=""))
m <- ggplot() +
geom_sf(data=megacounty_hesitancy_date, aes(text=text, fill=hesitancy)) +
geom_sf(data=county_hesitancy_date, aes(text=text, fill=hesitancy),size=0.3, color="black") +
my_map_theme() +
scale_fill_gradient2("Percent\nHesitancy", labels=scales::percent, low="blue", mid="#ffffbf", high="red", limits=c(0, 0.35), midpoint=0.18) +
labs(title = paste("<b>COVID Vaccine Hesitancy by County</b><br><sup>Percentage of population who is unvaccinated, has no appointment to receive a vaccine,\n and would definitely or probably choose not to get vaccinated if a vaccine were offered.\nWeek of", date_param, "</sup>")) +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(plot.subtitle = element_text(hjust = 0.5))
ggplotly(m, tooltip = c("text")) %>%
style(hoveron = "fills")
}
covidmap("2022-02-28")
shiny::runApp('Documents/Data Science/Final Project Part 2/MapTest')
runApp()
runApp('Documents/Data Science/Final Project Part 2/MapTest')
runApp('Documents/Data Science/Final Project Part 2/MapTest')
runApp()
runApp()
runApp('Documents/Data Science/Final Project Part 2/MapTest')
runApp('Documents/Data Science/Final Project Part 2/MapTest')
runApp('Documents/Data Science/Final Project Part 2/MapTest')
library(lubridate)
stamp("2021-02-25")
stamp("2021-02-25")
test <- stamp("2021-02-25")
View(test)
library(tidyverse)
library(openintro)
library(rnaturalearth)
library(rnaturalearthdata)
library(plotly)
library(readxl)
WHOLifeExpectancy <- read_excel("WHOLifeExpectancy.xlsx", skip = 2)
yearlist <- c(2016, 2015, 2010, 2005, 2000)
names(WHOLifeExpectancy) <- c("country",
paste("HALEbirth", "Both sexes", yearlist, sep="_"),
paste("HALEbirth", "Male", yearlist, sep="_"),
paste("HALEbirth", "Female", yearlist, sep="_"),
paste("HALE60", "Both sexes", yearlist, sep="_"),
paste("HALE60", "Male", yearlist, sep="_"),
paste("HALE60", "Female", yearlist, sep="_"))
View(WHOLifeExpectancy)
WHOLifeExpectancyTidy <- WHOLifeExpectancy %>%
pivot_longer("HALEbirth_Both sexes_2016":HALE60_Female_2000, names_to = "group") %>%
separate(col="group", into = c("type", "sex", "year"), sep="_") %>%
pivot_wider(names_from = type, values_from = value)%>%
mutate(HALE60 = as.numeric(HALE60), HALEbirth = as.numeric(HALEbirth), year=as.numeric(year)) %>%
arrange(desc(year))
head(WHOLifeExpectancyTidy, 10)
expectancy_both_2016 <- filter(WHOLifeExpectancyTidy, year == 2016 & sex == "Both sexes");
View(expectancy_both_2016)
WHO_metadata <- read_csv("WHO_metadata.csv", col_names = FALSE)
world <- ne_countries(scale = "medium", returnclass = "sf")
names(WHO_metadata) = c("region", "iso_a3", "country")
View(WHO_metadata)
WHOiso <- left_join(expectancy_both_2016, WHO_metadata, by="country")
View(WHOiso)
View(WHO_metadata)
world_life_expectancy_2016_both <- left_join(world, WHOiso, by="iso_a3")
View(world_life_expectancy_2016_both)
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
ggplot(data = world_life_expectancy_2016_both) +
geom_sf(aes(fill = HALEbirth), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
my_map_theme() +
labs(title = "Healthy Life Expectancy at\nBirth in 2016")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth)) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(world_life_expectancy_2016_both), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
filter(world_life_expectancy_2016_both, name=="United States")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth)) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(world_life_expectancy_2016_both), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
m <- world_life_expectancy_2016_both %>%
mutate(text=paste("<b>",admin,"</b>\nHealthy Life Expectancy:", HALEbirth)) %>%
ggplot() +
geom_sf(aes(fill = HALEbirth+runif(nrow(world_life_expectancy_2016_both), min=0, max=0.0001), text=text), color="black") +
scale_fill_continuous("Healthy Life\nExpectancy\nat Birth (years)", low="red", high="blue") +
labs(title="Healthy Life Expectancy\nat Birth in 2016") +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fills")
runApp('Documents/Data Science/Final Project Part 2/Final')
runApp('Documents/Data Science/Final Project Part 2/Final')
?tabPanel
?tabsetPanel
runApp('Documents/Data Science/Final Project Part 2/Final')
runApp('Documents/Data Science/Final Project Part 2/Final')
?if
runApp('Documents/Data Science/Final Project Part 2/Final')
dhyper(2,2,3,2)
dhyper(2,2,3,2)+dhyper(2,2,3,2)
2/5*1/4
choose(5,2)
choose(5,4)
choose(5,3)
dhyper(4,4,1,4)
dhyper(2,4,1,4)
dhyper(4,4,1,4)
dhyper(4,4,1,2)
dhyper(2,4,1,2)
gamma(2)
gamma(1/2)*gamma(3/2)
sqrt(pi)
pi/2
0.1294+0.3206
0.45/2
0.3206-0.225
0.225-0.0956
qnorm(0.95)
qnorm(0.975)
0.0956/1.96
(0.0956/1.96)^2
((0.225)*(1-0.225))/0.00237905
(0.0956/1.96)^2/(0.225*(1-0.225))
(0.225*(1-0.225))/((0.0956/1.96)^2)
qnorm(0.975)
(0.225*(1-0.225))/((0.0956/1.959964)^2)
1/64+3/24
9/654
9/64
pgamma(2,4,3)
pgamma(2,4,3)-pgamma(2/3,4,3)
6*5*5*5*5
library(MASS)
attach(cats)
view(cats)
View(cats)
subset(cats, Sex=='F')
t.test(subset(cats, Sex=='F')$Bwt)
test<-t.test(subset(cats, Sex=='F')$Bwt)
View(test)
t.test(subset(cats, Sex=='F')$Bwt)$conf.int
t.test(subset(cats, Sex=='M')$Bwt)$conf.int
10/8
sqrt(10^2+8^2)
164/4
1-pnorm(0,-5,sqrt(164))
1-pnorm(1.25)
1-pnorm(1.5)
1-pnorm(65,50,10)
1-pnorm(65,55,8)
1-pbinom(25,30,0.85)
1-pnbinom(20,20,0.15)
1-pnbinom(80,20,0.15)
1-pnbinom(90,20,0.15)
1-pnbinom(100,20,0.15)
20/120
1-pnbinom(120,20,0.15)
20/0.15
-20
20/0.15-20
binom.test(31,40,0.85)
(gamma(1/2)*gamma(3/2))/(gamma(2))
b(1/2,3/2)
beta(1/2, 3/2)
pi/2
1.96*sqrt(((1-0.225)*0.225)/73)
0.225+1.96*sqrt(((1-0.225)*0.225)/73)
0.225+1.96*sqrt(((1-0.225)*0.225)/72)
0.225+1.96*sqrt(((1-0.225)*0.225)/74)
0.225+1.96*sqrt(((1-0.225)*0.225)/73)
0.225+1.959*sqrt(((1-0.225)*0.225)/73)
0.225-1.959*sqrt(((1-0.225)*0.225)/73)
integrate(x/2+3/8)
integrate(x/2+3/8, 0, 1/4)
?integrate
integrate(function(x)(x/2+3/8) , 0, 1/4)
9/64
7/64
binom.test(31,40,0.85)
prop.test(31,40,0.85)
prop.test(31,40,0.85, correct=F)
plot(dbinom(x) ~ x)
plot(dbinom() ~ x)
plot(dbinom(1:50) ~ 1:50)
fisher.test(rbind(c(10,31), c(10,9)))
fisher.test(rbind(c(31,9), c(10,10)))
dgeom(1,0.85)
pgeom(1,0.85)
pgeom(0,0.85)
pgeom(0,0.15)
1-pgeom(0,0.15)
dgeom(0,.15)
1-dgeom(0,0.15)
binom.test(31,40,0.85)
10^2+8^2
sqrt(164)
1-pnorm(0,-5,sqrt(164))
1-pbinom(25,30,0.85)
pnbinom(113,20,.15)
fisher.test(rbind(c(10,31), c(10,9)))
binom.test(31,40,0.85)
pgamma(2,4,3)-pgamma(2/3,4,3)
t.test(subset(cats, Sex=="F")$Bwt)$conf.int
t.test(subset(cats, Sex=="M")$Bwt)$conf.int
shiny::runApp('Documents/Data Science/Final Project Part 2/Final')
cov_demo_counties <- read_csv("covid_demo_counties.csv",
col_types = cols(date = col_date(format = "%Y-%m-%d"),
cut = col_factor(levels = c("Less than 10%",
"10%-24.9%", "25-50%"))))
cov_demo_counties <- read_csv("covid_demo_counties.csv",
col_types = cols(date = col_date(format = "%Y-%m-%d"),
cut = col_factor(levels = c("Less than 10%",
"10%-24.9%", "25-50%"))))
setwd("~/Documents/Data Science/Final Project Part 2/Final")
cov_demo_counties <- read_csv("covid_demo_counties.csv",
col_types = cols(date = col_date(format = "%Y-%m-%d"),
cut = col_factor(levels = c("Less than 10%",
"10%-24.9%", "25-50%"))))
View(cov_demo_counties)
runApp()
